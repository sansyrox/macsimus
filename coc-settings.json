{
  // suggestions
  // "suggest.echodocSupport": true,
/* https://code.visualstudio.com/docs/editor/intellisense  reference for vscode symbols*/
/* https://www.nerdfonts.com/cheat-sheet  reference to find some other symbols*/
    /* some symbols you might like: פּ                  */
    /* fb44 this is the hex for nf-mdi-file_tree, should be good for class*/
  "suggest.completionItemKindLabels": {
    "method": "  ",
    "function": "  ",
    "variable": "[]",
    "field": "  ",
    "typeParameter": "<>",
    "constant": "  ",
    "class": "  ",
    "interface": " 蘒",
    "struct": "   ",
    "event": "  ",
    "operator": "  ",
    "module": "  ",
    "property": "  ",
    "enum": " 練",
    "reference": "  ",
    "keyword": "  ",
    "file": "  ",
    "folder": "  ",
    "color": "  ",
    "unit": " 塞 ",
    "snippet": "  ",
    "text": "  ",
    "constructor": "  ",
    "value": "  ",
    "enumMember": "   ",
    "default": "  "
  },
  "snippets.priority": 1,
  //"yank.priority": 1,
  "suggest.languageSourcePriority": 99,
  "coc.source.file.priority": 2,
  "coc.source.around.priority": 3,
  "coc.source.buffer.priority": 4,

  // diagnostics
  "diagnostic.errorSign": " ",
  "diagnostic.warningSign": " ",
  "diagnostic.infoSign": "",
  "diagnostic.hintSign": " ",
  // "diagnostic.displayByAle": true,
  // "diagnostic.virtualText": true, // this won't work with codelens when error on same line

  // codelens
  "codeLens.enable": true,
  "java.referencesCodeLens.enabled": true,
  "java.implementationsCodeLens.enabled": true,
  "java.completion.enabled": true,

  // list
  "list.indicator": ">",
  "list.selectedSignText": " ",

  // autoformat
  "coc.preferences.formatOnSaveFiletypes": [
    "scss",
    "css",
    /* "markdown", */
    "javascript",
    "javascriptreact",
    "jsx",
    "graphql",
    "html",
    "yaml",
    "json",
    "python",
    "rust"
  ],

  // "coc.preferences.hoverTarget": "float",

  // python config
  "pyright.enable": true,
  "python.analysis.autoImportCompletions": true,
  "python.analysis.autoSearchPaths": true,
  "python.analysis.diagnosticMode": "openFilesOnly",
  "python.analysis.stubPath": "typings",
  "python.analysis.typeshedPaths": [],
  "python.analysis.diagnosticSeverityOverrides": {},
  "python.analysis.typeCheckingMode": "basic",
  "python.analysis.useLibraryCodeForTypes": true,
  "python.pythonPath": "python3",
  "python.venvPath": "",
  "python.formatting.provider": "black",
  "python.formatting.blackPath": "~/.local/bin/black",
  "python.formatting.blackArgs": [],
  "python.formatting.autopep8Path": "autopep8",
  "python.formatting.autopep8Args": [],
  "python.formatting.yapfPath": "yapf",
  "python.formatting.yapfArgs": [],
  "python.linting.enabled": true,
  "python.linting.flake8Enabled": true,
  "python.linting.banditEnabled": false,
  "python.linting.mypyEnabled": false,
  "python.linting.pytypeEnabled": false,
  "python.linting.prospectorEnabled": false,
  "python.linting.pydocstyleEnabled": true,
  "python.linting.pylamaEnabled": false,
  "python.linting.pylintEnabled": true,

  // snippets
  "snippets.ultisnips.directories": ["UltiSnips", "~/.config/nvim/snips"],
  //"snippets.userSnippetsDirectory": "~/.config/nvim/snips",

  // emmet
  "emmet.includeLanguages": {
    "vue-html": "html",
    "javascript": "javascriptreact"
  },

  // CSS (disable since I'm also using stylelintplus)
  "css.validate": false,
  "less.validate": false,
  "scss.validate": false,
  "wxss.validate": false,
  "scss.completion.completePropertyWithSemicolon": true,
  "scss.colorDecorators.enable": true,


  //coc-emoji
  "coc.source.emoji.filetypes": ["markdown"],

  // lua
  //"lua.useSumnekoLs": true,
  //"lua.commandPath": "/home/chris/.luambenvs/neovim3/bin/lua-lsp"
  //"lua.enable": true,
  //"Lua.completion.enable": true,
  //"Lua.runtime.version": "Lua 5.1",
  //"Lua.runtime.path": ["?.lua", "?/init.lua", "?/?.lua"],
  //"lua.version": "5.1"
  //"lua.commandPath": "/home/chris/.vscode-insiders/extensions/sumneko.lua-1.0.5/server/bin/Linux/lua-language-server"
  
  // rust
  "rust-analyzer.enable":true,
  // "rust-analyzer.server.path": "/opt/homebrew/bin/rust-analyzer",
  // "clangd.path": "~/.config/coc/extensions/coc-clangd-data/install/14.0.3/clangd_14.0.3/bin/clangd",
  "git.addGBlameToVirtualText": true

  // TODO b:coc_suggest_disable=1 GOYO
  // TODO add to paths.vim g:coc_node_path
}
